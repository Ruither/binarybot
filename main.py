# M√≥dulo principal para executar o rob√¥ com base nos m√≥dulos importados

from mt5_collector import initialize_mt5, shutdown_mt5, get_rates
from support_resistance import calculate_support_resistance
from lateralization import is_lateralization
from patterns import check_retracement, check_previous_wicks, is_candle_stretched
from signals import evaluate_entry, check_signal_success
from telegram_notifier import send_telegram_message
import time
from datetime import datetime, timedelta, timezone
from investing_news import buscar_noticias_importantes, dentro_de_janela_de_noticia

# Carrega configura√ß√µes externas do arquivo YAML com valida√ß√£o
import yaml, os, sys
config_path = os.path.join(os.path.dirname(__file__), "config.yaml")

try:
    with open(config_path, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

        # Verifica√ß√£o de campos obrigat√≥rios no config.yaml
        required_keys = [
            "symbols", "min_distance_pips", "min_retracement_percent",
            "tempo_analise_segundos", "horario_operacao", "telegram"
        ]

        missing_keys = [key for key in required_keys if key not in config]
        if missing_keys:
            print(f"O arquivo de configura√ß√£o est√° incompleto. Faltando: {', '.join(missing_keys)}")
            sys.exit(1)

        # Verifica subchaves do bloco 'telegram'
        if not all(k in config["telegram"] for k in ("bot_token", "chat_id")):
            print("O bloco 'telegram' deve conter as chaves 'bot_token' e 'chat_id'.")
            sys.exit(1)

        # Verifica subchaves do bloco 'horario_operacao'
        if not all(k in config["horario_operacao"] for k in ("inicio", "fim")):
            print("O bloco 'horario_operacao' deve conter as chaves 'inicio' e 'fim'.")
            sys.exit(1)

except FileNotFoundError:
    print(f"Arquivo de configura√ß√£o n√£o encontrado em: {config_path}")
    sys.exit(1)

except yaml.YAMLError as e:
    print("Erro ao interpretar o arquivo YAML:", e)
    sys.exit(1)

# Par√¢metros de suporte e resist√™ncia
sr_config = config.get("support_resistance", {})
min_touches = sr_config.get("min_touches", 2)
min_distance_between_touches = sr_config.get("min_distance_between_touches", 5)
tolerance_pips = sr_config.get("tolerance_pips", 2)
min_region_separation = sr_config.get("min_region_separation", 10)

# Lista de pares de moedas definida no arquivo de configura√ß√£o
symbols = config["symbols"]

# Token e ID do chat para envio no Telegram
bot_token = config["telegram"]["bot_token"]
chat_id = config["telegram"]["chat_id"]

# Dist√¢ncia m√≠nima entre o pre√ßo de abertura e o n√≠vel de suporte/resist√™ncia
min_distance_pips = config["min_distance_pips"]

# Percentual m√≠nimo de retra√ß√£o da vela
min_retr_pct = config["min_retracement_percent"]

# Janela de tempo da an√°lise (em segundos)
tempo_analise = config["tempo_analise_segundos"]

# Hor√°rio de opera√ß√£o permitido
hora_inicio = config["horario_operacao"]["inicio"]
hora_fim = config["horario_operacao"]["fim"]

def main():
    # Inicializa conex√£o com MetaTrader 5
    if not initialize_mt5():
        return
    
    # üîé Carrega not√≠cias importantes do dia
    eventos_importantes = buscar_noticias_importantes()
    if eventos_importantes is None or len(eventos_importantes) == 0:
        print("Nenhuma not√≠cia importante carregada. Operando sem bloqueio.")

    last_news_update = time.time()  # para atualizar a cada 1 hora

    # Dicion√°rio que armazena sinais enviados e dados relacionados
    signals = {}

    # Contadores para estat√≠sticas
    total_signals = 0
    success_signals = 0
    failed_signals = 0

    # Dicion√°rio de controle de retra√ß√£o por s√≠mbolo
    retracement_data = {
        symbol: {'has_retraced': False, 'body_size': 0} for symbol in symbols
    }

    print("Rob√¥ iniciado. Aguardando vela M5...")

    try:
        while True:
            current_time = time.localtime()
            hour = current_time.tm_hour
            day = datetime.now().weekday()  # Dia da semana (0=segunda)

            # ‚è≥ Atualiza as not√≠cias a cada 1 hora
            if time.time() - last_news_update > 3600:
                print("Atualizando eventos econ√¥micos...")
                eventos_importantes = buscar_noticias_importantes()
                last_news_update = time.time()
                if eventos_importantes is None or len(eventos_importantes) == 0:
                    print("Atualiza√ß√£o de not√≠cias falhou. Continuando opera√ß√£o sem bloqueio.")
                else:
                    print(f"{len(eventos_importantes)} not√≠cias de impacto carregadas.")

            # Valida se est√° dentro do hor√°rio de opera√ß√£o: dias √∫teis das 6h √†s 17h
            if 0 <= day <= 4 and hora_inicio <= hour < hora_fim:
                # Aguarda at√© o pr√≥ximo m√∫ltiplo de 5 minutos
                if current_time.tm_min % 5 != 0:
                    wait_time = (5 - current_time.tm_min % 5) * 60 - current_time.tm_sec
                    time.sleep(wait_time)

                # In√≠cio da janela de 2 minutos de an√°lise (tempo_analise configurado no YAML)
                start_time = time.time()
                while time.time() - start_time < tempo_analise:
                    #print(f"Analisando ativos √†s {datetime.now().strftime('%H:%M:%S')}...")

                    # Verifica se h√° alguma not√≠cia de alto impacto no momento
                    now = datetime.now()
                    bloqueado = False

                    for evento in eventos_importantes:
                        janela_inicio = evento['horario'] - timedelta(minutes=15)
                        janela_fim = evento['horario'] + timedelta(minutes=15)

                        if janela_inicio <= now <= janela_fim:
                            print(f"Sinal bloqueado por not√≠cia: {evento['horario'].strftime('%H:%M')} - {evento['moeda']} - {evento['descricao']} ({evento['impacto']} estrelas)")
                            bloqueado = True
                            break

                    if bloqueado:
                        continue

                    for symbol in symbols:
                        # Coleta 37 velas M5 (36 anteriores + atual)
                        rates = get_rates(symbol, 5, 0, 100)
                        if rates is None or len(rates) < 37:
                            continue

                        current = rates[-1]
                        high = current['high']
                        low = current['low']
                        open_ = current['open']
                        close = current['close']

                        # Calcula tamanho do corpo da vela
                        body_size = abs(close - open_)
                        retracement_data[symbol]['body_size'] = body_size

                        # Verifica retra√ß√£o m√≠nima
                        if body_size > 0.00001:
                            retr_up = (high - close) / body_size
                            retr_down = (close - low) / body_size
                            if retr_up >= min_retr_pct or retr_down >= min_retr_pct:
                                retracement_data[symbol]['has_retraced'] = True

                        # Suporte e resist√™ncia com as 24 velas (ignorando 12 mais recentes)
                        support, resistance = calculate_support_resistance(
                            rates,
                            symbol,
                            min_touches=min_touches,
                            min_distance_between_touches=min_distance_between_touches,
                            tolerance_pips=tolerance_pips,
                            min_region_separation=min_region_separation
                        )
                        if support is None or resistance is None:
                            print(f"{symbol} Suporte ou resist√™ncia n√£o encontrado.")
                            continue

                        # Verifica lateraliza√ß√£o nas √∫ltimas 36 velas
                        if not is_lateralization(rates[-36:]):
                            print(f"{symbol} Gr√°fico n√£o est√° lateralizado.")
                            continue

                        # Avalia sinal t√©cnico
                        signal = evaluate_entry(rates, support, resistance, symbol, min_distance_pips, retracement_data)

                        # Se houver sinal, checa pavios e vela esticada se necess√°rio
                        if signal:
                            direction = "buy" if "buy" in signal else "sell"
                            if not check_previous_wicks(rates, direction):
                                continue

                            minuto = now.minute
                            if minuto % 15 >= 10:
                                m15_rates = get_rates(symbol, 15, 1, 1)
                                if not m15_rates or not is_candle_stretched(m15_rates[0]):
                                    continue
                            if minuto % 30 >= 20:
                                m30_rates = get_rates(symbol, 30, 1, 1)
                                if not m30_rates or not is_candle_stretched(m30_rates[0]):
                                    continue
                            if minuto >= 40:
                                h1_rates = get_rates(symbol, 60, 1, 1)
                                if not h1_rates or not is_candle_stretched(h1_rates[0]):
                                    continue

                        # Se for um novo sinal, envia ao Telegram e registra
                        if signal and symbol not in signals:
                            total_signals += 1
                            entry_price = current['close']
                            now_str = datetime.now().strftime("%H:%M:%S")
                            price_fmt = "{:.3f}" if "JPY" in symbol else "{:.5f}"
                            formatted_price = price_fmt.format(entry_price)

                            message = (
                                f"<b>NEW Time:</b> <code>{now_str} üïê</code>\n"
                                f"<b>Symbol:</b> <code>{symbol} üìä</code>\n"
                                f"<b>Signal:</b> <code>{signal}</code>\n"
                                f"<b>Price:</b> <code>{formatted_price} üí∞</code>"
                            )
                            print(message)
                            send_telegram_message(bot_token, chat_id, message)

                            signals[symbol] = {
                                'signal': signal,
                                'entry_price': entry_price,
                                'timestamp': now_str
                            }

                        # üîç Imprime sempre as dist√¢ncias para debug, mesmo que tenha sinal
                        pips_multiplier = 0.01 if "JPY" in symbol else 0.0001
                        current_open = current['open']
                        distance_to_support = (current_open - support) / pips_multiplier
                        distance_to_resistance = (resistance - current_open) / pips_multiplier
                        distance_to_support = max(0, distance_to_support)
                        distance_to_resistance = max(0, distance_to_resistance)

                        now_str = datetime.now().strftime("%H:%M:%S")
                        print(f"{now_str} - Waiting for best entry. {symbol} - Sup: {support:.5f}, Resist: {resistance:.5f}, DS: {distance_to_support:.2f}, DR: {distance_to_resistance:.2f}")
                
                # Aguarda in√≠cio da nova vela M5 para validar sinais
                while True:
                    current_time = time.localtime()
                    if current_time.tm_sec == 0 and current_time.tm_min % 5 == 0:
                        # Reseta os dados de retra√ß√£o para nova an√°lise
                        for symbol in symbols:
                            retracement_data[symbol]['has_retraced'] = False
                            retracement_data[symbol]['body_size'] = 0
                        break
                    time.sleep(1)

                # Avalia os resultados dos sinais emitidos
                for symbol, data in list(signals.items()):
                    final = get_rates(symbol, 5, 0, 1)  # Coleta a vela rec√©m-fechada
                    if not final:
                        continue
                    final_price = final[-1]['close']

                    # Formata o pre√ßo de sa√≠da
                    price_fmt = "{:.3f}" if "JPY" in symbol else "{:.5f}"
                    formatted_price = price_fmt.format(final_price)

                    # Verifica se o movimento foi na dire√ß√£o esperada
                    success = check_signal_success(data['signal'], final_price, data['entry_price'])
                    if success:
                        success_signals += 1
                        result = "NEW Successful ‚úÖ"
                    else:
                        failed_signals += 1
                        result = "NEW Failed ‚ùå"

                    # Monta mensagem com resultado e hist√≥rico
                    result_msg = (
                        f"<b>NEW Symbol:</b> <code>{symbol} üìä</code>\n"
                        f"<b>Price:</b> <code>{formatted_price} üí∞</code>\n"
                        f"<b>Resultado:</b> <code>{result}</code>\n\n"
                        f"<b>Hist√≥rico:</b>\n"
                        f"<b>Total:</b> <code>{total_signals}</code>\n"
                        f"<b>Successful:</b> <code>{success_signals} ‚úÖ</code>\n"
                        f"<b>Failure:</b> <code>{failed_signals} ‚ùå</code>"
                    )
                    print(result_msg)
                    send_telegram_message(bot_token, chat_id, result_msg)
                    del signals[symbol]  # Remove o sinal j√° avaliado

            else:
                # Fora do hor√°rio de opera√ß√£o, aguarda 5 minutos antes de checar novamente
                print("Fora do hor√°rio de opera√ß√£o. Aguardando pr√≥xima janela...")
                time.sleep(300)

    finally:
        # Encerra conex√£o com MetaTrader 5 ao sair do loop
        shutdown_mt5()

# Executa o rob√¥
if __name__ == "__main__":
    main()